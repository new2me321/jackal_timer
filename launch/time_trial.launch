<?xml version="1.0" encoding="UTF-8"?>

<launch>

  <!-- Gazebo Stuff -->
  <arg name="use_sim_time" default="true" />
  <arg name="gui" default="false" />
  <arg name="headless" default="false" />

  <arg name="world_number" default="0" />

  <arg name="start_x" default="-2.0" />
  <arg name="start_y" default="3.0" />
  <arg name="start_yaw" default="1.5708" />

  <arg name="goal_x" default="-2.0" />
  <arg name="goal_y" default="11.0" />
  <arg name="show_rviz" default="false" />


  <arg name="record_flag" default="false" />

  <!-- Short-term hack to support the original front_laser:=true argument for spawning
       the simulator. This will be removed in favour of using the config:=x arg instead. -->
  <arg name="front_laser" default="true" />
  <arg name="default_config" value="front_laser" if="$(arg front_laser)" />
  <arg name="default_config" value="base" unless="$(arg front_laser)" />
  <!-- end of hack -->

  <!-- Configuration of Jackal which you would like to simulate.
       See jackal_description for details. -->
  <arg name="config" default="$(arg default_config)" />

  <!-- Launch Gazebo with the specified world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="0" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="use_sim_time" value="$(arg use_sim_time)" />
    <arg name="headless" value="$(arg headless)" />
    <arg name="world_name"
      value="$(find jackal_timer)/data/world_files/world_$(arg world_number).world" />
  </include>

  <!-- Load Jackal's description, controllers, and teleop nodes. -->
  <include file="$(find jackal_description)/launch/description.launch">
    <arg name="config" value="$(arg config)" />
  </include>
  <include file="$(find jackal_control)/launch/control.launch" />
  <include file="$(find jackal_control)/launch/teleop.launch">
    <arg name="joystick" value="true" />
  </include>

  <!-- Spawn Jackal -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
    args="-urdf -model jackal -param robot_description -x $(arg start_x) -y $(arg start_y) -z 0 -Y $(arg start_yaw)" />


  <!-- Run the map server -->
  <arg name="map_file" default="$(find jackal_timer)/data/map_files/yaml_$(arg world_number).yaml" />
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

  <!-- Run AMCL -->
  <include file="$(find jackal_navigation)/launch/include/amcl.launch">
    <arg name="initial_pose_x" value="$(arg start_x)" />
    <arg name="initial_pose_y" value="$(arg start_y)" />
    <arg name="initial_pose_a" value="$(arg start_yaw)" />
    <!-- <remap from="odom" to="odometry/filtered"/> -->
    
  </include>

  <!-- Run Move Base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

    <rosparam file="$(find jackal_navigation)/params/costmap_common_params.yaml" command="load"
      ns="global_costmap" />
    <rosparam file="$(find jackal_navigation)/params/costmap_common_params.yaml" command="load"
      ns="local_costmap" />

    <rosparam file="$(find jackal_navigation)/params/map_nav_params/local_costmap_params.yaml"
      command="load" />
    <rosparam file="$(find jackal_navigation)/params/map_nav_params/global_costmap_params.yaml"
      command="load" />

    <rosparam file="$(find jackal_navigation)/params/base_local_planner_params.yaml" command="load" />
    <rosparam file="$(find jackal_navigation)/params/move_base_params.yaml" command="load" />

    <param name="base_global_planner" type="string" value="navfn/NavfnROS" />
    <param name="navfn/NavfnROS/use_dijkstra" type="bool" value="false" />
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS" />

    <remap from="odom" to="odometry/filtered" />
  </node>


  <group if="$(arg show_rviz)">
    <include file="$(find jackal_viz)/launch/view_robot.launch">
      <arg name="config" value="localization" />
    </include>
  </group>


  <!-- traversal_timer -->
  <!-- <node pkg="jackal_timer" name="traversal_timer" type="traversal_timer.py" args="$(arg goal_x)
  $(arg goal_y) $(arg start_x) $(arg start_y)" output="screen" required = "true">
  </node> -->

  <!-- Laserscan to PointCloud -->
<include file="$(find jackal_nn)/launch/laserscan_to_pointcloud.launch"/>

</launch>